// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	service.proto
	user.proto
	util.proto

It has these top-level messages:
	ServiceInfo
	ServiceInfos
	Notification
	Notifications
	NullMsg
	User
	UserSession
	UserCredit
	NullMessage
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ServiceInfo struct {
	WorkerAddr string `protobuf:"bytes,1,opt,name=WorkerAddr,json=workerAddr" json:"WorkerAddr,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=Version,json=version" json:"Version,omitempty"`
}

func (m *ServiceInfo) Reset()                    { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()               {}
func (*ServiceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceInfos struct {
	ServiceInfo []*ServiceInfo `protobuf:"bytes,1,rep,name=ServiceInfo,json=serviceInfo" json:"ServiceInfo,omitempty"`
}

func (m *ServiceInfos) Reset()                    { *m = ServiceInfos{} }
func (m *ServiceInfos) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfos) ProtoMessage()               {}
func (*ServiceInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceInfos) GetServiceInfo() []*ServiceInfo {
	if m != nil {
		return m.ServiceInfo
	}
	return nil
}

type Notification struct {
	Error int32  `protobuf:"varint,1,opt,name=Error,json=error" json:"Error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Notifications struct {
	Notification []*Notification `protobuf:"bytes,1,rep,name=Notification,json=notification" json:"Notification,omitempty"`
}

func (m *Notifications) Reset()                    { *m = Notifications{} }
func (m *Notifications) String() string            { return proto.CompactTextString(m) }
func (*Notifications) ProtoMessage()               {}
func (*Notifications) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Notifications) GetNotification() []*Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type NullMsg struct {
}

func (m *NullMsg) Reset()                    { *m = NullMsg{} }
func (m *NullMsg) String() string            { return proto.CompactTextString(m) }
func (*NullMsg) ProtoMessage()               {}
func (*NullMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*ServiceInfo)(nil), "model.ServiceInfo")
	proto.RegisterType((*ServiceInfos)(nil), "model.ServiceInfos")
	proto.RegisterType((*Notification)(nil), "model.Notification")
	proto.RegisterType((*Notifications)(nil), "model.Notifications")
	proto.RegisterType((*NullMsg)(nil), "model.NullMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for RegistrationService service

type RegistrationServiceClient interface {
	// ListAllWorkerServices lists all available worker services.
	// Errors:
	ListAllWorkerServices(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ServiceInfos, error)
}

type registrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationServiceClient(cc *grpc.ClientConn) RegistrationServiceClient {
	return &registrationServiceClient{cc}
}

func (c *registrationServiceClient) ListAllWorkerServices(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ServiceInfos, error) {
	out := new(ServiceInfos)
	err := grpc.Invoke(ctx, "/model.RegistrationService/ListAllWorkerServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegistrationService service

type RegistrationServiceServer interface {
	// ListAllWorkerServices lists all available worker services.
	// Errors:
	ListAllWorkerServices(context.Context, *NullMsg) (*ServiceInfos, error)
}

func RegisterRegistrationServiceServer(s *grpc.Server, srv RegistrationServiceServer) {
	s.RegisterService(&_RegistrationService_serviceDesc, srv)
}

func _RegistrationService_ListAllWorkerServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).ListAllWorkerServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.RegistrationService/ListAllWorkerServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).ListAllWorkerServices(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.RegistrationService",
	HandlerType: (*RegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllWorkerServices",
			Handler:    _RegistrationService_ListAllWorkerServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for NotificationService service

type NotificationServiceClient interface {
	GetUnreadNotification(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*Notifications, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) GetUnreadNotification(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*Notifications, error) {
	out := new(Notifications)
	err := grpc.Invoke(ctx, "/model.NotificationService/GetUnreadNotification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotificationService service

type NotificationServiceServer interface {
	GetUnreadNotification(context.Context, *NullMsg) (*Notifications, error)
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_GetUnreadNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetUnreadNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.NotificationService/GetUnreadNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetUnreadNotification(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnreadNotification",
			Handler:    _NotificationService_GetUnreadNotification_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for AccountService service

type AccountServiceClient interface {
	SignUp(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error)
	LogIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	LogOut(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error)
	TopUp(ctx context.Context, in *UserCredit, opts ...grpc.CallOption) (*NullMessage, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error)
	Enable(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error)
	Disable(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) SignUp(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := grpc.Invoke(ctx, "/model.AccountService/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LogIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/model.AccountService/LogIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LogOut(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := grpc.Invoke(ctx, "/model.AccountService/LogOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) TopUp(ctx context.Context, in *UserCredit, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := grpc.Invoke(ctx, "/model.AccountService/TopUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := grpc.Invoke(ctx, "/model.AccountService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Enable(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := grpc.Invoke(ctx, "/model.AccountService/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Disable(ctx context.Context, in *User, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := grpc.Invoke(ctx, "/model.AccountService/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceServer interface {
	SignUp(context.Context, *User) (*NullMessage, error)
	LogIn(context.Context, *User) (*User, error)
	LogOut(context.Context, *User) (*NullMessage, error)
	TopUp(context.Context, *UserCredit) (*NullMessage, error)
	Update(context.Context, *User) (*NullMessage, error)
	Enable(context.Context, *User) (*NullMessage, error)
	Disable(context.Context, *User) (*NullMessage, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AccountService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SignUp(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AccountService/LogIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LogIn(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AccountService/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LogOut(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_TopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).TopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AccountService/TopUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).TopUp(ctx, req.(*UserCredit))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AccountService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AccountService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Enable(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AccountService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Disable(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _AccountService_SignUp_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _AccountService_LogIn_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _AccountService_LogOut_Handler,
		},
		{
			MethodName: "TopUp",
			Handler:    _AccountService_TopUp_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountService_Update_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _AccountService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _AccountService_Disable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0x5f, 0x8b, 0xda, 0x40,
	0x14, 0xc5, 0xfd, 0x43, 0x0c, 0xde, 0xa8, 0xb4, 0x13, 0x05, 0xf1, 0xa1, 0x94, 0xf4, 0x45, 0x68,
	0x91, 0x62, 0x4b, 0xfb, 0xd6, 0x22, 0x55, 0xac, 0xe0, 0xba, 0x10, 0x37, 0xee, 0x73, 0x4c, 0xc6,
	0x30, 0x6c, 0x9c, 0x09, 0x33, 0x13, 0xf7, 0x33, 0xee, 0xb7, 0xda, 0x31, 0x89, 0xbb, 0x93, 0xfd,
	0x03, 0x79, 0xcb, 0x39, 0xf7, 0xdc, 0xdf, 0xbd, 0x73, 0x21, 0xd0, 0x15, 0x98, 0x9f, 0x48, 0x80,
	0x27, 0x09, 0x67, 0x92, 0x21, 0xe3, 0xc8, 0x42, 0x1c, 0x8f, 0x20, 0x55, 0x76, 0x6e, 0xa9, 0x6f,
	0x49, 0xe2, 0xfc, 0xdb, 0x59, 0x82, 0xb5, 0xcd, 0xf3, 0x2b, 0x7a, 0x60, 0xe8, 0x13, 0xc0, 0x2d,
	0xe3, 0x77, 0x98, 0xcf, 0xc2, 0x90, 0x0f, 0xeb, 0x9f, 0xeb, 0xe3, 0xb6, 0x0b, 0xf7, 0x4f, 0x0e,
	0x1a, 0x82, 0xb9, 0xc3, 0x5c, 0x10, 0x46, 0x87, 0x8d, 0xac, 0x68, 0x9e, 0x72, 0xe9, 0xcc, 0xa1,
	0xa3, 0x81, 0x04, 0xfa, 0x59, 0x02, 0x2b, 0x54, 0x73, 0x6c, 0x4d, 0xd1, 0x24, 0xdb, 0x66, 0xa2,
	0x55, 0x5c, 0x4b, 0x3c, 0x0b, 0xe7, 0x17, 0x74, 0x36, 0x4c, 0x92, 0x03, 0x09, 0x7c, 0xa9, 0xa8,
	0xa8, 0x0f, 0xc6, 0x82, 0x73, 0x96, 0xaf, 0x62, 0xb8, 0x06, 0x3e, 0x0b, 0xf4, 0x01, 0x9a, 0x57,
	0x22, 0x2a, 0x36, 0x68, 0x1e, 0x45, 0xe4, 0xfc, 0x87, 0xae, 0xde, 0x27, 0xd0, 0xef, 0x32, 0xa8,
	0x98, 0x6f, 0x17, 0xf3, 0xf5, 0x92, 0xdb, 0xa1, 0x9a, 0x72, 0xda, 0x60, 0x6e, 0xd2, 0x38, 0x56,
	0xfc, 0xa9, 0x07, 0xb6, 0x8b, 0x23, 0x22, 0x24, 0xcf, 0x4a, 0xc5, 0xd2, 0xe8, 0x0f, 0x0c, 0xd6,
	0xca, 0x9c, 0xc5, 0x71, 0x7e, 0xaa, 0xc2, 0x17, 0xa8, 0x77, 0xa1, 0xe7, 0xfd, 0x23, 0xfb, 0xf5,
	0x6b, 0x85, 0x53, 0x9b, 0xee, 0xc0, 0xd6, 0xe7, 0x5f, 0xb0, 0x7f, 0x61, 0xb0, 0xc4, 0xd2, 0xa3,
	0x1c, 0xfb, 0x61, 0xe9, 0x06, 0x2f, 0xb1, 0xfd, 0x37, 0x1e, 0x71, 0xe6, 0x3e, 0x34, 0xa0, 0x37,
	0x0b, 0x02, 0x96, 0x52, 0x79, 0x61, 0x7e, 0x85, 0xd6, 0x96, 0x44, 0xd4, 0x4b, 0x90, 0x55, 0x34,
	0x79, 0xea, 0xda, 0x23, 0xa4, 0x13, 0xb1, 0x10, 0x7e, 0x84, 0x9d, 0x1a, 0xfa, 0x02, 0xc6, 0x9a,
	0x45, 0x2b, 0x5a, 0xce, 0xea, 0x42, 0x85, 0x14, 0x51, 0x85, 0xae, 0x53, 0x59, 0x85, 0xf8, 0x1d,
	0x8c, 0x1b, 0x96, 0xa8, 0xe9, 0x1f, 0xb5, 0xec, 0x3f, 0x8e, 0x43, 0x22, 0xdf, 0xe9, 0x50, 0x78,
	0x2f, 0x09, 0x7d, 0x89, 0xab, 0xe0, 0x55, 0x78, 0x41, 0xfd, 0x7d, 0x5c, 0x29, 0xfc, 0x0d, 0xcc,
	0x39, 0x11, 0x15, 0xd3, 0xfb, 0x56, 0xf6, 0x77, 0xfc, 0x78, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x73,
	0x0b, 0x3e, 0xc5, 0x4d, 0x03, 0x00, 0x00,
}
